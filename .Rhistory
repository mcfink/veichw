return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheMean(c(3,2,3,4,49,99))
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setmean <- function(mean){
m <<- mean
}
getmean <- function(){
m
}
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cacheMean <- function(x, ...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheMean(c(3,2,3,4,49,99))
sv <- c(3,19,91,93,94,90)
makeVector(sv)
cacheMean(sv)
makeVector(sv$set)
makeVector$set(sv)
sv$set
sv$getmean
makeVector(sv$set)
makeVector(sv)$set
makeVector()$get
cacheMean(sv)
cacheMean(makeVector, sv)
a <- makeVector
a$setmean(sv)
a$setmean
a$set(sv)
a <- makeVector()
a$set(sv)
a$get(sv)
a$get()
a$getmean()
a$setmean
a$setmean()
a$setmean(sv)
a$getmean()
cachemean(a, sv)
a$set(NULL)
a$setmean(NULL)
cacheMean(a, sv)
cacheMean(a, 3189,13,19,399)
a$set(NULL)
a$setmean(NULL)
cacheMean(a, 3189,13,19,399)
sv
a$setmean
a$setmean(NULL)
a$getmean
a$getmean()
a$get()
cacheMean(sv)
cacheMean(a, sv)
mean(sv)
cacheMean(a, sv)
a$set(NULL)
a$setmean(NULL)
cacheMean(a, sv)
mySpecialVector <- makeVector(sv)
cacheMean(mySpecialVector)
mySpecialVector$getmean
mySpecialVector$getmean()
mySpecialVector$get()
mySpecialVector$set(c(48,23,4989,22))
cacheMean(mySpecialVector)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setinverse <- function(inverse){
m <<- inverse
}
getinverse <- function(){
m
}
list(set = set, get = get, setiinverse = setinverse, getinverse = getinverse)
}
cacheMean <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix$getinverse()
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(my_matrix)
my_matrix$get()
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setinverse <- function(inverse){
m <<- inverse
}
getinverse <- function(){
m
}
list(set = set, get = get, setiinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...){
matrix <- x$getinverse()
if(!is.null(matrix)){
message("getting cached data")
return(matrix)
}
data <- x$get()
matrix <- solve(data, ...)
x$setinverse(matrix)
matrix
}
my_matrix<-makeCacheMatrix(matrix(1:4, 2,2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
solve(my_matrix)
solve(matrix(c(1,3,2,4)), 2,2)
solve(matrix(c(1,3,2,4), 2,2))
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setinverse <- function(inverse){
m <<- inverse
}
getinverse <- function(){
m
}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...){
matrix <- x$getinverse()
if(!is.null(matrix)){
message("getting cached data")
return(matrix)
}
data <- x$get()
matrix <- solve(data, ...)
x$setinverse(matrix)
matrix
}
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setinverse <- function(inverse){
m <<- inverse
}
getinverse <- function(){
m
}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## this function returns the inverse of the input matrix.
## if the inverse has already been computed, the cached inverse is returned
## otherwise, this function computes the input matrix's inverse.
cacheSolve <- function(x, ...) {
matrix <- x$getinverse()
if(!is.null(matrix)){
message("getting cached data")
return(matrix)
}
data <- x$get()
matrix <- solve(data, ...)
x$setinverse(matrix)
matrix
}
sv <- makeCacheMatrix(matrix(1,0,1,0,0,1,2,3,1),3,3)
sv <- makeCacheMatrix(matrix(c(1,0,1,0,0,1,2,3,1),3,3))
sv
sv_$get
sv$get()
sv$getinverse()
cacheSolve(sv)
sv$getinverse()
sv$set(matrix(c(1:4), 2,2))
sv$getinverse()
sv$get()
cacheSolve(sv)
sv$getinverse()
cacheSolve(sv)
set.seed(1)
rpois(5,2)
?qpois
?rep
rep(0:1, 5)
rep(0:1, each=5)
x <- rep(0:1, each=5)
y <- rnorm(10,0,20)
z <-0.5+ 2* x + y
z
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = 86b365a37fec3bfca8d7, secret = 3dd6bfa7c49ea1148cb6a351922ebf9e92c799e5)
myapp <- oauth_app("github", key = "86b365a37fec3bfca8d7", secret = "3dd6bfa7c49ea1148cb6a351922ebf9e92c799e5")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
test <- url("https://api.github.com/users/jtleek/repos")
test
test.description
test$description
install.packages(RMySQL)
install.packages("RMySQL")
library(RMySQL)
acs <- dbConnect(MySQL(), host = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
setwd("~/Desktop/jh-data-courses")
acs <- read.csv("getdata%2Fdata%2Fss06pid.csv")
acs <- read.csv("getdata-2Fdata-2Fss06pid.csv")
acs <- read.csv("getdata-data-ss06pid.csv")
dbDisconnect(acs)
dbListConnections()
dbListConnections(MySQL())
dbDisconnect(list)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
library(XML)
htmlCode = readlines(con)
htmlCode = readLines(con = )
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
htmlCode[1]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[40])
nchar(htmlCode[50])
nchar(htmlCode[100])
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
htmlCode <- readLines(con)
close(con)
htmlCode
library(readr)
install.packages(readr)
install.packages("readr")
library(readr)
x <- read_fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
fwf_widths(c(12, 7,4, 9,4, 9,4, 9,4))))
x <- read_fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
fwf_widths(c(12, 7,4, 9,4, 9,4, 9,4)))
htmlCode
x <- read_fwf(https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for)
x <- read_fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
x <- read_fwf(con)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
x <- read_fwf(con)
x <- read_fwf(con, skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
x <- read_fwf( url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
## functions
)
x <- read_fwf( url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "), skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
close()
close(con)
x <- read_fwf( url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "), skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
library(readr)
x <- read_fwf( url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "), skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
x <- read_fwf(con, skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
con
x
htmlCode <- readLines(con)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
htmlCode <- readLines(con)
head(htmlCode)
write.table(htmlCode, file = "texty.txt")
x <- read_fwf("texty.txt"), skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
x <- read_fwf("texty.txt", skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
head(x)
sum(x$X4)
summary(x$X4)
sum(as.numeric(x$X4))
x <- read_fwf("texty.txt", skip=4, fwf_widths(c(13, 7,4,9,4,9,4,9,4)))
sum(as.numeric(x$X4))
head(x)
summary(x)
summary(as.numeric(x$X4))
x$X4
x <- read_fwf("texty.txt", skip=4, widths = c(12, 7,4,9,4,9,4,9,4))
x <- read.fwf("texty.txt", skip=4, widths = c(12, 7,4,9,4,9,4,9,4))
head(x)
head(x, 50)
x <- read.fwf("texty.txt", skip=4, widths = c(16, 7,4,9,4,9,4,9,4))
head(x, 50)
x <- read.fwf("texty.txt", skip=4, widths = c(16, 9,4,9,4,9,4,9,4))
head(x, 50)
colSums(as.numeric(x$V4))
sum(as.numeric(x$V4))
length(x)
length(x$V1)
1255* 25
x <- read.fwf("texty.txt", skip=12, widths = c(16, 9,4,9,4,9,4,9,4))
sum(as.numeric(x$V4))
head(x, 20)
tail(x, 20)
install.packages('maps')
library(maps)
map('state.carto', fill = TRUE, col = palette())
data(stateMapEnv)
data(state.vbm.center)
map('usa')
install.packages(gpclib)
install.packages('gpclib')
install.packages('maptools')
library(RColorBrewer)
library(classInt)
install.packages('classInt')
library(gpclib)
library(maptools)
gpclibPermit()
library(classInt)
a <-download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv )
a <-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" )
a <-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", a.csv )
?download.file
getwd()
a <- read.csv("getdata-data-ss06hid.csv")
head(a)
library(dplyr)
vec <- ifelse(a$ACR ==4, ifelse(a$AGS == 6, TRUE, FALSE), FALSE)
head(vec)
b <- a[vec]
b <-tbl_df(a)
c <- filter(b, ACR == 3)
d <- filter(c, AGS == 6)
head(d)
vec <- ifelse(a$ACR ==4, ifelse(a$AGS == 6, TRUE, FALSE), FALSE)
a[which(vec)]
which(vec)
head(vec)
head(vec, 19)
head(vec, 300)
which(vec)
vec <- ifelse(a$ACR ==3, ifelse(a$AGS == 6, TRUE, FALSE), FALSE)
which(vec)
library(jpeg)
install.packages("jpeg")
library(jpeg)
readJPEG("test.jpg")
readJPEG("test.jpg", native=TRUE)
a <-readJPEG("test.jpg", native=TRUE)
quantile(a, c(.3, .8))
a <- read.csv('edstats.csv')
b <- read.csv('GDP.csv')
?merge
?join
head(b)
head(b$X.1)
head(b$X.1, 30)
head(b$X, 30)
head(a$X, 30)
head(a, 30)
c <- merge(a, b, by.x="X", by.y = "CountryCode")
c <- merge(a, b, by.x=X, by.y = "CountryCode")
c <- merge(a, b, by.x=a$X, by.y = "CountryCode")
c <- merge(a, b, by.y = "CountryCode")
c <- merge(a, b, by.y = b$X)
?merge
c <- merge(a,b)
head(c, 30)
head(c, 3)
head(a$Short.Name)
head(a$CountryCode)
head(b$X)
merge(a, b, by.a = "CountryCode", by.b = "X")
c <- merge(a, b, by.a = "CountryCode", by.b = "X")
head(c,2)
d <- sort(c$Gross.domestic.product.2012)
head(d$Gross.domestic.product.2012)
head(d, 15)
head(c,5)
length(d)
length(a)
length(b)
length(a$CountryCode)
length(b$X)
c <- merge(a, b, by.x = "CountryCode", by.y = "X")
d <- sort(c$Gross.domestic.product.2012)
head(d, 15)
head(d$GDP)
combined <- merge(a,b, by.x = "CountryCode", by.y = "X")
head(combined)
combined$GDP <- as.numeric(as.character(combined$Gross.domestic.product.2012))
combined$Short.Name <- as.character(combined$Short.Name)
head(combined, 13)
head(combined[order(combined$GDP, decreasing = TRUE)])
head(combined[order(combined$GDP, decreasing = TRUE),])
head(combined[order(combined$GDP, decreasing = TRUE),], 13)
?cut
f <- tapply(combined$GDP, combined$Income.Group, na.rm = TRUE, man)
f <- tapply(combined$GDP, combined$Income.Group, na.rm = TRUE, mean)
f
g <- cut(combined, breaks=5)
g <- cut(combined$GDP, breaks=5)
?table
table(g$GDP, g$Income.Group)
g <- data.frame(combined$Short.Name, combined$GDP, combined$Income.Group)
head(g)
g$quant <- cut(g$combined.GDP, breaks=5)
table(g$quant, g$combined.GDP)
table(g$quant, g$combined.Income.Group)
?maps
library(maps)
library(maptools)
?maps
library(maps)
library(mapdata)
install.packages('mapdata')
library(mapdata)
map("worldHires", "Greece", xlim = c(0, 50), ylim = c(35, 70), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(15, 35), ylim = c(40, 45), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(15, 35), ylim = c(38, 45), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(15, 35), ylim = c(36, 45), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(15, 35), ylim = c(32, 45), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(15, 35), ylim = c(30, 43), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(20, 30), ylim = c(30, 43), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(22, 27), ylim = c(30, 43), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(20, 29), ylim = c(30, 43), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(20, 28), ylim = c(30, 43), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(20, 29), ylim = c(30, 43), col="#000080", fill=TRUE)
map("worldHires", "Greece", xlim = c(20, 29), ylim = c(30, 43), col="#BBCCFF", fill=TRUE)
map("worldLores", "Greece", xlim = c(20, 29), ylim = c(30, 43), col="#BBCCFF", fill=TRUE)
map("worldHires", "Greece", xlim = c(20, 29), ylim = c(30, 43), col="#BBCCFF", fill=TRUE)
?map
# VEIC Interview Project
install.packages('xlsx')
library(xlsx)
library(xlsx)
a  <- read.xlsx("EnergyDataAnalaysisHomeworkData9-2015.xlsx", 1)
setwd("~/Desktop/VEIC-II")
a  <- read.xlsx("EnergyDataAnalaysisHomeworkData9-2015.xlsx", 1)
summary(a)
?read.xlsx
a  <- read.xlsx("EnergyDataAnalaysisHomeworkData9-2015.xlsx", 1, startRow = 4)
summary(a)
b  <- read.xlsx("EnergyDataAnalaysisHomeworkData9-2015.xlsx", 2, startRow = 1)
summary(b)
library(lubridate)
